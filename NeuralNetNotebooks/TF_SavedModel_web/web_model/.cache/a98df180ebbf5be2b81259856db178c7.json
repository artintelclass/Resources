{"dependencies":[{"name":"/Users/aaronsherwood/Documents/Classes/artintelclass/Resources/NeuralNetNotebooks/vae_model2/web_model/package.json","includedInParent":true,"mtime":1524325734000},{"name":"/Users/aaronsherwood/Documents/Classes/artintelclass/Resources/NeuralNetNotebooks/vae_model2/web_model/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1524163232000},{"name":"@tensorflow/tfjs-core","loc":{"line":3,"column":18}},{"name":"./utils","loc":{"line":4,"column":22}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar utils_1 = require(\"./utils\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'conv1d': {\n            var stride = utils_1.getParamValue('stride', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            var dataFormat = utils_1.getParamValue('dataFormat', node, tensorMap)\n                .toUpperCase();\n            var dilation = utils_1.getParamValue('dilation', node, tensorMap);\n            return [tfc.conv1d(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), stride, pad, dataFormat, dilation)];\n        }\n        case 'conv2d': {\n            var stride = utils_1.getParamValue('strides', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            var dataFormat = utils_1.getParamValue('dataFormat', node, tensorMap)\n                .toUpperCase();\n            var dilations = utils_1.getParamValue('dilations', node, tensorMap);\n            return [tfc.conv2d(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), [stride[1], stride[2]], pad, dataFormat, [dilations[0], dilations[1]])];\n        }\n        case 'conv2dTranspose': {\n            var shape = utils_1.getParamValue('outputShape', node, tensorMap);\n            var stride = utils_1.getParamValue('strides', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            return [tfc.conv2dTranspose(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), shape, [stride[1], stride[2]], pad)];\n        }\n        case 'depthwiseConv2d': {\n            var stride = utils_1.getParamValue('strides', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            var dilations = utils_1.getParamValue('dilations', node, tensorMap);\n            var dataFormat = utils_1.getParamValue('dataFormat', node, tensorMap)\n                .toUpperCase();\n            return [tfc.depthwiseConv2d(utils_1.getParamValue('input', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), [stride[1], stride[2]], pad, dataFormat, [dilations[0], dilations[1]])];\n        }\n        case 'avgPool': {\n            var stride = utils_1.getParamValue('strides', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            var kernelSize = utils_1.getParamValue('kernelSize', node, tensorMap);\n            return [tfc.avgPool(utils_1.getParamValue('x', node, tensorMap), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'maxPool': {\n            var stride = utils_1.getParamValue('strides', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            var kernelSize = utils_1.getParamValue('kernelSize', node, tensorMap);\n            return [tfc.maxPool(utils_1.getParamValue('x', node, tensorMap), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'convolution';\n//# sourceMappingURL=convolution_executor.js.map","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar utils_1 = require(\"./utils\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'conv1d': {\n            var stride = utils_1.getParamValue('stride', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            var dataFormat = utils_1.getParamValue('dataFormat', node, tensorMap)\n                .toUpperCase();\n            var dilation = utils_1.getParamValue('dilation', node, tensorMap);\n            return [tfc.conv1d(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), stride, pad, dataFormat, dilation)];\n        }\n        case 'conv2d': {\n            var stride = utils_1.getParamValue('strides', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            var dataFormat = utils_1.getParamValue('dataFormat', node, tensorMap)\n                .toUpperCase();\n            var dilations = utils_1.getParamValue('dilations', node, tensorMap);\n            return [tfc.conv2d(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), [stride[1], stride[2]], pad, dataFormat, [dilations[0], dilations[1]])];\n        }\n        case 'conv2dTranspose': {\n            var shape = utils_1.getParamValue('outputShape', node, tensorMap);\n            var stride = utils_1.getParamValue('strides', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            return [tfc.conv2dTranspose(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), shape, [stride[1], stride[2]], pad)];\n        }\n        case 'depthwiseConv2d': {\n            var stride = utils_1.getParamValue('strides', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            var dilations = utils_1.getParamValue('dilations', node, tensorMap);\n            var dataFormat = utils_1.getParamValue('dataFormat', node, tensorMap)\n                .toUpperCase();\n            return [tfc.depthwiseConv2d(utils_1.getParamValue('input', node, tensorMap), utils_1.getParamValue('filter', node, tensorMap), [stride[1], stride[2]], pad, dataFormat, [dilations[0], dilations[1]])];\n        }\n        case 'avgPool': {\n            var stride = utils_1.getParamValue('strides', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            var kernelSize = utils_1.getParamValue('kernelSize', node, tensorMap);\n            return [tfc.avgPool(utils_1.getParamValue('x', node, tensorMap), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'maxPool': {\n            var stride = utils_1.getParamValue('strides', node, tensorMap);\n            var pad = utils_1.getParamValue('pad', node, tensorMap);\n            var kernelSize = utils_1.getParamValue('kernelSize', node, tensorMap);\n            return [tfc.maxPool(utils_1.getParamValue('x', node, tensorMap), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'convolution';\n//# sourceMappingURL=convolution_executor.js.map"},"lineCount":54}},"hash":"0f6ac7f964cbd9a3a4c37e6ced55a0bf","cacheData":{"env":{}}}