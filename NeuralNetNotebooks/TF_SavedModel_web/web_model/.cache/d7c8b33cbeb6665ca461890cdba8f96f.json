{"dependencies":[{"name":"/Users/aaronsherwood/Documents/Classes/artintelclass/Resources/NeuralNetNotebooks/vae_model2/web_model/package.json","includedInParent":true,"mtime":1524325734000},{"name":"/Users/aaronsherwood/Documents/Classes/artintelclass/Resources/NeuralNetNotebooks/vae_model2/web_model/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1524163232000},{"name":"@tensorflow/tfjs-core","loc":{"line":3,"column":18}},{"name":"./utils","loc":{"line":4,"column":22}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar utils_1 = require(\"./utils\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'concat': {\n            var axis = utils_1.getParamValue('axis', node, tensorMap);\n            var inputs = utils_1.getParamValue('tensors', node, tensorMap);\n            return [tfc.concat(inputs, axis)];\n        }\n        case 'gather': {\n            var axis = utils_1.getParamValue('axis', node, tensorMap);\n            var input = utils_1.getParamValue('x', node, tensorMap);\n            var indices = utils_1.getParamValue('indices', node, tensorMap);\n            return [tfc.gather(input, indices, axis)];\n        }\n        case 'reverse': {\n            var axis = utils_1.getParamValue('axis', node, tensorMap);\n            var input = utils_1.getParamValue('x', node, tensorMap);\n            return [tfc.reverse(input, axis)];\n        }\n        case 'slice': {\n            var begin = utils_1.getParamValue('begin', node, tensorMap);\n            var size = utils_1.getParamValue('size', node, tensorMap);\n            return [tfc.slice(utils_1.getParamValue('x', node, tensorMap), begin, size)];\n        }\n        case 'stack': {\n            var axis = utils_1.getParamValue('axis', node, tensorMap);\n            return [tfc.stack(utils_1.getParamValue('tensors', node, tensorMap), axis)];\n        }\n        case 'tile': {\n            var reps = utils_1.getParamValue('reps', node, tensorMap);\n            return [tfc.tile(utils_1.getParamValue('x', node, tensorMap), reps)];\n        }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'slice_join';\n//# sourceMappingURL=slice_join_executor.js.map","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar utils_1 = require(\"./utils\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'concat': {\n            var axis = utils_1.getParamValue('axis', node, tensorMap);\n            var inputs = utils_1.getParamValue('tensors', node, tensorMap);\n            return [tfc.concat(inputs, axis)];\n        }\n        case 'gather': {\n            var axis = utils_1.getParamValue('axis', node, tensorMap);\n            var input = utils_1.getParamValue('x', node, tensorMap);\n            var indices = utils_1.getParamValue('indices', node, tensorMap);\n            return [tfc.gather(input, indices, axis)];\n        }\n        case 'reverse': {\n            var axis = utils_1.getParamValue('axis', node, tensorMap);\n            var input = utils_1.getParamValue('x', node, tensorMap);\n            return [tfc.reverse(input, axis)];\n        }\n        case 'slice': {\n            var begin = utils_1.getParamValue('begin', node, tensorMap);\n            var size = utils_1.getParamValue('size', node, tensorMap);\n            return [tfc.slice(utils_1.getParamValue('x', node, tensorMap), begin, size)];\n        }\n        case 'stack': {\n            var axis = utils_1.getParamValue('axis', node, tensorMap);\n            return [tfc.stack(utils_1.getParamValue('tensors', node, tensorMap), axis)];\n        }\n        case 'tile': {\n            var reps = utils_1.getParamValue('reps', node, tensorMap);\n            return [tfc.tile(utils_1.getParamValue('x', node, tensorMap), reps)];\n        }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'slice_join';\n//# sourceMappingURL=slice_join_executor.js.map"},"lineCount":41}},"hash":"85af1c2810938779c782c8346203b8f9","cacheData":{"env":{}}}