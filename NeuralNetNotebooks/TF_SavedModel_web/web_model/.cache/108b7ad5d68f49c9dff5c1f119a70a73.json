{"dependencies":[{"name":"/Users/aaronsherwood/Documents/Classes/artintelclass/Resources/NeuralNetNotebooks/web_model/package.json","includedInParent":true,"mtime":1524325734000},{"name":"/Users/aaronsherwood/Documents/Classes/artintelclass/Resources/NeuralNetNotebooks/web_model/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1524163232000},{"name":"@tensorflow/tfjs-core","loc":{"line":3,"column":18}},{"name":"./utils","loc":{"line":4,"column":22}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar utils_1 = require(\"./utils\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'fill': {\n            var shape = utils_1.getParamValue('shape', node, tensorMap);\n            var value = utils_1.getParamValue('value', node, tensorMap);\n            return [tfc.fill(shape, value)];\n        }\n        case 'linspace': {\n            var start = utils_1.getParamValue('start', node, tensorMap);\n            var stop_1 = utils_1.getParamValue('stop', node, tensorMap);\n            var num = utils_1.getParamValue('num', node, tensorMap);\n            return [tfc.linspace(start, stop_1, num)];\n        }\n        case 'oneHot': {\n            var indices = utils_1.getParamValue('indices', node, tensorMap);\n            var depth = utils_1.getParamValue('depth', node, tensorMap);\n            var onValue = utils_1.getParamValue('onValue', node, tensorMap);\n            var offValue = utils_1.getParamValue('offValue', node, tensorMap);\n            return [tfc.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'ones': {\n            return [tfc.ones(utils_1.getParamValue('shape', node, tensorMap), utils_1.getParamValue('dtype', node, tensorMap))];\n        }\n        case 'onesLike': {\n            return [tfc.onesLike(utils_1.getParamValue('x', node, tensorMap))];\n        }\n        case 'randomUniform': {\n            return [tfc.randomUniform(utils_1.getParamValue('shape', node, tensorMap), utils_1.getParamValue('minval', node, tensorMap), utils_1.getParamValue('maxval', node, tensorMap), utils_1.getParamValue('dtype', node, tensorMap))];\n        }\n        case 'range': {\n            var start = utils_1.getParamValue('start', node, tensorMap);\n            var stop_2 = utils_1.getParamValue('stop', node, tensorMap);\n            var step = utils_1.getParamValue('step', node, tensorMap);\n            return [tfc.range(start, stop_2, step, utils_1.getParamValue('dtype', node, tensorMap))];\n        }\n        case 'truncatedNormal': {\n            var shape = utils_1.getParamValue('shape', node, tensorMap);\n            var mean = utils_1.getParamValue('mean', node, tensorMap);\n            var stdDev = utils_1.getParamValue('stdDev', node, tensorMap);\n            var seed = utils_1.getParamValue('seed', node, tensorMap);\n            return [tfc.truncatedNormal(shape, mean, stdDev, utils_1.getParamValue('dtype', node, tensorMap), seed)];\n        }\n        case 'zeros': {\n            return [tfc.zeros(utils_1.getParamValue('shape', node, tensorMap), utils_1.getParamValue('dtype', node, tensorMap))];\n        }\n        case 'zerosLike': {\n            return [tfc.zerosLike(utils_1.getParamValue('x', node, tensorMap))];\n        }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'creation';\n//# sourceMappingURL=creation_executor.js.map","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar utils_1 = require(\"./utils\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'fill': {\n            var shape = utils_1.getParamValue('shape', node, tensorMap);\n            var value = utils_1.getParamValue('value', node, tensorMap);\n            return [tfc.fill(shape, value)];\n        }\n        case 'linspace': {\n            var start = utils_1.getParamValue('start', node, tensorMap);\n            var stop_1 = utils_1.getParamValue('stop', node, tensorMap);\n            var num = utils_1.getParamValue('num', node, tensorMap);\n            return [tfc.linspace(start, stop_1, num)];\n        }\n        case 'oneHot': {\n            var indices = utils_1.getParamValue('indices', node, tensorMap);\n            var depth = utils_1.getParamValue('depth', node, tensorMap);\n            var onValue = utils_1.getParamValue('onValue', node, tensorMap);\n            var offValue = utils_1.getParamValue('offValue', node, tensorMap);\n            return [tfc.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'ones': {\n            return [tfc.ones(utils_1.getParamValue('shape', node, tensorMap), utils_1.getParamValue('dtype', node, tensorMap))];\n        }\n        case 'onesLike': {\n            return [tfc.onesLike(utils_1.getParamValue('x', node, tensorMap))];\n        }\n        case 'randomUniform': {\n            return [tfc.randomUniform(utils_1.getParamValue('shape', node, tensorMap), utils_1.getParamValue('minval', node, tensorMap), utils_1.getParamValue('maxval', node, tensorMap), utils_1.getParamValue('dtype', node, tensorMap))];\n        }\n        case 'range': {\n            var start = utils_1.getParamValue('start', node, tensorMap);\n            var stop_2 = utils_1.getParamValue('stop', node, tensorMap);\n            var step = utils_1.getParamValue('step', node, tensorMap);\n            return [tfc.range(start, stop_2, step, utils_1.getParamValue('dtype', node, tensorMap))];\n        }\n        case 'truncatedNormal': {\n            var shape = utils_1.getParamValue('shape', node, tensorMap);\n            var mean = utils_1.getParamValue('mean', node, tensorMap);\n            var stdDev = utils_1.getParamValue('stdDev', node, tensorMap);\n            var seed = utils_1.getParamValue('seed', node, tensorMap);\n            return [tfc.truncatedNormal(shape, mean, stdDev, utils_1.getParamValue('dtype', node, tensorMap), seed)];\n        }\n        case 'zeros': {\n            return [tfc.zeros(utils_1.getParamValue('shape', node, tensorMap), utils_1.getParamValue('dtype', node, tensorMap))];\n        }\n        case 'zerosLike': {\n            return [tfc.zerosLike(utils_1.getParamValue('x', node, tensorMap))];\n        }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'creation';\n//# sourceMappingURL=creation_executor.js.map"},"lineCount":58}},"hash":"b3287607d8a929204839669386a12cba","cacheData":{"env":{}}}