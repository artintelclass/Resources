{"dependencies":[{"name":"/Users/aaronsherwood/Documents/Classes/artintelclass/Resources/NeuralNetNotebooks/vae_model2/web_model/package.json","includedInParent":true,"mtime":1524325734000},{"name":"/Users/aaronsherwood/Documents/Classes/artintelclass/Resources/NeuralNetNotebooks/vae_model2/web_model/node_modules/@tensorflow/tfjs-converter/package.json","includedInParent":true,"mtime":1524163232000},{"name":"@tensorflow/tfjs-core","loc":{"line":3,"column":18}},{"name":"./utils","loc":{"line":4,"column":22}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar utils_1 = require(\"./utils\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'batchNormalization': {\n            return [tfc.batchNormalization(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('mean', node, tensorMap), utils_1.getParamValue('variance', node, tensorMap), utils_1.getParamValue('epislon', node, tensorMap), utils_1.getParamValue('scale', node, tensorMap), utils_1.getParamValue('offset', node, tensorMap))];\n        }\n        case 'localResponseNormalization': {\n            return [tfc.localResponseNormalization(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('radius', node, tensorMap), utils_1.getParamValue('bias', node, tensorMap), utils_1.getParamValue('alpha', node, tensorMap), utils_1.getParamValue('beta', node, tensorMap))];\n        }\n        case 'softmax': {\n            return [tfc.softmax(utils_1.getParamValue('x', node, tensorMap))];\n        }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'normalization';\n//# sourceMappingURL=normalization_executor.js.map","map":{"mappings":[{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}}],"sources":{"node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfc = require(\"@tensorflow/tfjs-core\");\nvar utils_1 = require(\"./utils\");\nexports.executeOp = function (node, tensorMap) {\n    switch (node.op) {\n        case 'batchNormalization': {\n            return [tfc.batchNormalization(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('mean', node, tensorMap), utils_1.getParamValue('variance', node, tensorMap), utils_1.getParamValue('epislon', node, tensorMap), utils_1.getParamValue('scale', node, tensorMap), utils_1.getParamValue('offset', node, tensorMap))];\n        }\n        case 'localResponseNormalization': {\n            return [tfc.localResponseNormalization(utils_1.getParamValue('x', node, tensorMap), utils_1.getParamValue('radius', node, tensorMap), utils_1.getParamValue('bias', node, tensorMap), utils_1.getParamValue('alpha', node, tensorMap), utils_1.getParamValue('beta', node, tensorMap))];\n        }\n        case 'softmax': {\n            return [tfc.softmax(utils_1.getParamValue('x', node, tensorMap))];\n        }\n        default:\n            throw TypeError(\"Node type \" + node.op + \" is not implemented\");\n    }\n};\nexports.CATEGORY = 'normalization';\n//# sourceMappingURL=normalization_executor.js.map"},"lineCount":21}},"hash":"0cfd00ebd020fcad1d0e4403e1f51c84","cacheData":{"env":{}}}